%zad([-2;-1; 0; 1; 2], inline('4*x.^5-x.^2+12'))
function[]=zad(arg,fun)
n=length(arg);
A(:,1)=arg';
A(:,2)=fun(arg');
m=n;
for i=3:m+1
    for j=1:n-1
        A(j,i)=(A(j+1,i-1)-A(j,i-1))/(A(j+i-2,1)-A(j,1)); %Wytwarza górê tabeli do Newtona
    end
    n=n-1;
end
A;
A(1,:); %biorê tylko górê tabeli
B=[];
m;
for i=1:m
   B(1,i) =A(1,i+1); % papa, panie x0 :)
end
B

syms x;
W=B(1,1); %Tworzymy wielomian, P(xi)=yi
for i=2:length(B);
    iloczyn = 1; 
    for j=1:i-1; 
        iloczyn= iloczyn *(x- arg(j,1));
    end;
    W = W + B(1,i) * iloczyn; 
end
W 
W=inline(W,'x'); 

hold on; %nowe wykresy nie zamazuj¹ starych, a dodaj¹ siê do istniej¹cych
title('interpolacja wielomianem Newtona','FontSize',12);
fplot(W,[min(arg) max(arg)],'g') 
fplot(fun,[min(arg) max(arg)],'k')
legend('funkcja interpoluj¹ca','funkcja interpolowana',2); 
hold off %! Nie zapom skoñczyæ


end


_________________________________________________________________________________

%zad2(0,4,59, inline('sin(x).*exp(cos(x))'))

%[a,b] - przedzia³ interpolacji,
% n - iloœæ wêz³ów równoodleg³ych, f - funkcja
function[]=zad2(a,b,n,fun)

arg=(n:1); %tworzymy tablicê wêz³ów, n wêz³ów=n wierszy
for k=0:n
    arg(k+1,1)=a+(b-a)*k/n;
end
arg
A(:,1)=arg';
A(:,2)=fun(arg');
m=n+1;
for i=3:m+1 %znowu tabela do Newtona
    for j=1:n
        A(j,i)=(A(j+1,i-1)-A(j,i-1))/(A(j+i-2,1)-A(j,1));
    end
    n=n-1;
end
A;
A(1,:);
B=[]; % papa xo!
m;
for i=1:m
   B(1,i) =A(1,i+1);
end

B

syms x;
W=B(1,1); 
for i=2:length(B); %again tworzymy wielomian
    iloczyn = 1; 
    for j=1:i-1; 
        iloczyn= iloczyn *(x- arg(j,1));
    end;
    W = W + B(1,i) * iloczyn;
end
W 
W=inline(W,'x'); 

hold on; %2 funkcje dok³adane
title('interpolacja wielomianem Newtona','FontSize',12); 
fplot(W,[min(arg) max(arg)],'g') 
fplot(fun,[min(arg) max(arg)],'k')
legend('funkcja interpoluj¹ca','funkcja interpolowana',2);
hold off %!


end


